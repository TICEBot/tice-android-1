apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlinx-serialization'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: "org.jmailen.kotlinter"
apply plugin: "de.mannodermaus.android-junit5"
apply plugin: "com.google.android.gms.oss-licenses-plugin"

android {
    compileSdkVersion 30
    defaultConfig {
        applicationId 'app.tice.TICE'
        minSdkVersion 21
        targetSdkVersion 30
        versionCode 31
        versionName "2.0"
        testInstrumentationRunnerArguments clearPackageData: 'true'
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }
    buildFeatures {
        viewBinding true
    }
    buildTypes {
        debug {
            debuggable = true
        }
        release {
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    flavorDimensions "environment"

    ext.configVar = { name ->
        Properties properties = new Properties()
        properties.load(project.rootProject.file('local.properties').newDataInputStream())
        def value = properties.getProperty(name) ?: System.getenv(name)
        if (value == null) {
            logger.error("Value for variable {} not defined via local configuration or environment variable. Falling back to empty string.", name)
            value = ""
        }
        return value
    }
    def placeholders = [
            "googleMapsAPIKey"              : configVar("GOOGLE_MAPS_API_KEY"),
            "developmentVerificationCode"   : configVar("DEVELOPMENT_VERIFICATION_CODE"),
            "cncBaseURL"                    : configVar("CNC_SERVER_ADDRESS")
    ]

    productFlavors {
        development {
            applicationIdSuffix = ".development"
            versionNameSuffix = "-development"
            manifestPlaceholders = placeholders.plus([
                    baseURL         : "https://development.api.tice.app",
                    websocketURL    : "wss://development.api.tice.app",
                    deepLinkHost    : "develop.tice.app",
                    displayName     : "TICE Develop",
                    beekeeperProduct: "TICE-development",
                    beekeeperSecret : configVar("BEEKEEPER_SECRET_DEVELOPMENT")
            ])
        }
        instrumentation {
            minSdkVersion 26
            applicationIdSuffix = ".development"
            manifestPlaceholders = placeholders.plus([
                    baseURL         : configVar("SERVER_ADDRESS"),
                    websocketURL    : configVar("WS_SERVER_ADDRESS"),
                    deepLinkHost    : "develop.tice.app",
                    displayName     : "TICE Instrumentation",
                    beekeeperProduct: "TICE-development",
                    beekeeperSecret : configVar("BEEKEEPER_SECRET_DEVELOPMENT")
            ])
        }
        adhoc {
            applicationIdSuffix = ".testing"
            versionNameSuffix = "-testing"
            manifestPlaceholders = placeholders.plus([
                    baseURL         : "https://testing.api.tice.app",
                    websocketURL    : "wss://testing.api.tice.app",
                    deepLinkHost    : "testing.tice.app",
                    displayName     : "TICE Testing",
                    beekeeperProduct: "TICE-testing",
                    beekeeperSecret : configVar("BEEKEEPER_SECRET_TESTING")
            ])
        }
        preview {
            applicationIdSuffix = ".preview"
            versionNameSuffix = "-preview"
            manifestPlaceholders = placeholders.plus([
                    baseURL         : "https://preview.api.tice.app",
                    websocketURL    : "wss://preview.api.tice.app",
                    deepLinkHost    : "preview.tice.app",
                    displayName     : "TICE Preview",
                    beekeeperProduct: "TICE-preview",
                    beekeeperSecret : configVar("BEEKEEPER_SECRET_PREVIEW")
            ])
        }
        production {
            applicationIdSuffix = ".production"
            manifestPlaceholders = placeholders.plus([
                    baseURL         : "https://api.tice.app",
                    websocketURL    : "wss://api.tice.app",
                    deepLinkHost    : "tice.app",
                    displayName     : "TICE",
                    beekeeperProduct: "TICE-production",
                    beekeeperSecret : configVar("BEEKEEPER_SECRET_PRODUCTION")
            ])
        }
    }

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.OptIn",
                "-Xinline-classes"
        ]
    }

    lintOptions {
        enable "MangledCRLF",
                "MinSdkTooLow",
                "NegativeMargin",
                "SelectableText",
                "WeekBasedYear"

        disable "UnsafeExperimentalUsageError",
                "UnsafeExperimentalUsageWarning",
                "GradleDependency",
                "ObsoleteLintCustomCheck",
                "TypographyEllipsis",
                "VectorPath",
                "DuplicateIncludedIds",
                "IidCompatibilityCheckFailure",
                "Typos"
    }

    testOptions {
        execution 'ANDROIDX_TEST_ORCHESTRATOR'
        unitTests.returnDefaultValues = true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE.md'
        exclude 'META-INF/LICENSE-notice.md'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }
    sourceSets {
        main { java.srcDirs = ['src/main/java'] }
        test { java.srcDirs = ['src/test/java'] }
        androidTest { java.srcDirs = ['src/androidTest/java'] }

        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }
}

configurations.all {
    // check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.2"
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.2'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation 'androidx.annotation:annotation:1.1.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.2.0'

    //android
    implementation "com.google.android.material:material:1.3.0-alpha01"
    implementation "androidx.sharetarget:sharetarget:1.0.0"
    implementation 'androidx.preference:preference:1.1.1'
    implementation 'androidx.paging:paging-runtime:3.0.0-alpha07'
    implementation 'com.android.support:multidex:1.0.3'
    implementation "androidx.work:work-runtime-ktx:2.5.0"

    //navigation
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"
    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    //dagger
    implementation 'com.google.dagger:dagger:2.37'
    implementation 'com.google.dagger:dagger-android:2.37'
    implementation 'com.google.dagger:dagger-android-support:2.37'
    implementation 'androidx.lifecycle:lifecycle-livedata-ktx:2.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-contrib:3.4.0-alpha03'
    kapt 'com.google.dagger:dagger-android-processor:2.37'
    kapt 'com.google.dagger:dagger-compiler:2.37'

    //Room
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "net.zetetic:android-database-sqlcipher:4.3.0"

    //google
    implementation 'com.google.android.gms:play-services-maps:17.0.0'
    implementation 'com.google.android.gms:play-services-plus:17.0.0'
    implementation 'com.google.android.gms:play-services-location:17.0.0'
    implementation 'com.google.firebase:firebase-messaging:20.2.4'
    implementation 'com.google.android.libraries.places:places:2.4.0'
    implementation 'com.google.android.gms:play-services-places:17.0.0'
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'

    //okHttp
    implementation 'com.squareup.okhttp3:okhttp:4.9.0'
    implementation 'com.squareup.okhttp3:okhttp-tls:4.9.0'
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:1.0-M1-1.4.0-rc"

    //Crypto
    implementation 'com.github.TICESoftware:AndroidX3DH:1.2.0'
    api 'com.github.TICESoftware:AndroidDoubleRatchet:2.1.0'
    implementation 'com.github.TICESoftware:AndroidHKDF:1.3.0'
    implementation "com.goterl:lazysodium-android:5.0.2@aar"
    implementation 'net.java.dev.jna:jna:5.8.0@aar'
    implementation 'io.jsonwebtoken:jjwt-impl:0.11.1'
    implementation 'io.jsonwebtoken:jjwt-api:0.11.1'
    runtimeOnly('io.jsonwebtoken:jjwt-orgjson:0.11.1') {
        exclude group: 'org.json', module: 'json' //provided by Android natively
    }

    //logback
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'com.github.tony19:logback-android:2.0.0'
    implementation("com.squareup.okhttp3:logging-interceptor:4.6.0")

    //JUnit5
    testImplementation "org.junit.jupiter:junit-jupiter-api:5.6.0"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:5.6.0"
    testImplementation "org.junit.jupiter:junit-jupiter-params:5.6.0"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:5.6.0"

    testImplementation 'junit:junit:4.13'
    testImplementation 'androidx.test.ext:junit:1.1.2'
    testImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.0'
    testImplementation 'androidx.test:core:1.3.0'
    testImplementation 'androidx.arch.core:core-testing:2.1.0'
    testImplementation "io.mockk:mockk:1.11.0"

    androidTestImplementation "com.goterl:lazysodium-android:5.0.2@aar"
    androidTestImplementation 'net.java.dev.jna:jna:5.8.0@aar'

    androidTestImplementation "androidx.room:room-testing:2.2.6"

    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0-alpha02'
    androidTestImplementation 'androidx.test.espresso:espresso-idling-resource:3.4.0-alpha02'
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    androidTestImplementation 'junit:junit:4.13'
    androidTestImplementation "io.mockk:mockk-android:1.11.0"
    androidTestImplementation 'androidx.test.uiautomator:uiautomator:2.2.0'
    androidTestUtil 'androidx.test:orchestrator:1.3.1-alpha01'

    androidTestImplementation 'androidx.arch.core:core-testing:2.1.0'
    androidTestImplementation 'org.jetbrains.kotlinx:kotlinx-coroutines-test:1.4.0'
    androidTestImplementation 'androidx.test:core:1.3.0'

    //AndroidJUnitRunner and JUnit Rules
    androidTestImplementation 'androidx.test:runner:1.3.0'
    androidTestImplementation 'androidx.test:rules:1.3.0'
    androidTestImplementation 'androidx.test.espresso:espresso-intents:3.1.0'
}

kotlinter {
    ignoreFailures = false
    indentSize = 4
    reporters = ['checkstyle', 'plain']
    experimentalRules = true
    disabledRules = ["no-wildcard-imports", "import-ordering", "experimental:annotation"]
}

lintKotlinAndroidTest {
    exclude '**/*.kt'
}

lintKotlinTest {
    exclude '**/*.kt'
}

apply plugin: 'com.google.gms.google-services'

tasks.withType(Test) {
    testLogging {
        exceptionFormat "full"
        events "started", "skipped", "passed", "failed"
        showStandardStreams true
    }
}
